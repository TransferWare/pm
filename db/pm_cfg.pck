/*
    The Performance Monitor monitors your Oracle databases.
    Copyright (C) 2002  G.J. Paulissen, Transfer Solutions b.v., Leerdam, Netherlands

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
PROMPT
PROMPT	$RCSfile$
REMARK 
REMARK	$Date$
REMARK
REMARK	$Author$
REMARK
REMARK  $Revision$
REMARK
REMARK  Description:	Create Configuration package of Performance Monitor.
REMARK
REMARK  $Log$
REMARK  Revision 1.1  2003/08/28 14:44:48  gpaulissen
REMARK  Release 6.0.0
REMARK
REMARK  Revision 1.8  2002/05/24 14:22:42  gpaulissen
REMARK  New release 4.1.0
REMARK
REMARK  Revision 1.7  2002/02/01 10:59:55  gpaulissen
REMARK  New make environment
REMARK
REMARK  Revision 1.6  2002/01/17 10:57:02  gpaulissen
REMARK  - make install enhanced.
REMARK  - make depend added (makedepend_oracle.pl, makedepend.sql, makestate.sql).
REMARK  - reports user text field widened (from 10 to 30) due to report 4.5 bug.
REMARK  - removed in install scripts:
REMARK    whenever sqlerror exit failure
REMARK    whenever oserror exit failure
REMARK
REMARK  Revision 1.5  1999/10/20 13:01:48  gpaulissen
REMARK  Added WHENEVER SQLERROR/OSERROR CONTINUE
REMARK
REMARK  Revision 1.4  1999/10/07 13:17:58  gpaulissen
REMARK  PR-777 WHENEVER SQLERROR/OSERROR
REMARK
REMARK  Revision 1.3  1999/08/10 13:14:47  gpaulissen
REMARK  Added version function.
REMARK
REMARK  Revision 1.2  1999/05/25 14:45:09  gpaulissen
REMARK  Released
REMARK
REMARK  Revision 1.1  1999/04/15 14:23:48  gpaulissen
REMARK  Initial revision
REMARK

REM
REM  This ORACLE7 command file was generated by Oracle Server Generator
REM  Version 5.5.10.0.0 on 15-APR-99
REM
REM For application PM version 1 database PM
REM
REM PACKAGE
REM      PM_CFG

REM
REM     Configuration
REM
PROMPT 
PROMPT Creating Package Specification pm_cfg

SET DOCUMENT OFF

DOCUMENT

The following documentation uses the Perl pod format. A html file
can be constructed by: 

  pod2html --infile=pm.pck --outfile=pm.html

=pod

=head1 NAME

pm_cfg - Performance Monitor configuration tasks

=head1 SYNOPSIS

=cut

#

-- =pod

CREATE OR REPLACE PACKAGE pm_cfg IS

  -- pragma for package
  pragma restrict_references( pm_cfg, rnds, wnds, rnps, wnps );  
  
  -- Set memory I/O rate per second
  procedure set_memory_io_rate( i_db in pm_run.db%type, i_value in number );
  
  pragma restrict_references( set_memory_io_rate, rnps );
  
  -- Get memory I/O rate per second
  function get_memory_io_rate( i_db in pm_run.db%type ) return number;
  
  pragma restrict_references( get_memory_io_rate, wnds );  
  
  -- Set disk I/O rate per second
  procedure set_disk_io_rate( i_db in pm_run.db%type, i_value in number );
  
  pragma restrict_references( set_disk_io_rate, rnps );
  
  -- Get disk I/O rate per second
  function get_disk_io_rate( i_db in pm_run.db%type ) return number;
  
  pragma restrict_references( get_disk_io_rate, wnds );
  
  -- Get statistic #
  function get_statistic#( i_name in varchar2 ) return number;
  
  pragma restrict_references( get_statistic#, wnds );
  
  function version return varchar2;
  
  pragma restrict_references( version, rnds, wnds, rnps, wnps );

end pm_cfg;

-- =cut

/


DOCUMENT

=head1 DESCRIPTION

The I<pm_cfg> package is used for setting/getting configuration info.

=head2 ROUTINES

=over 4

=item set_memory_io_rate

Set memory I/O rate per second.

=item get_memory_io_rate

Get memory I/O rate per second.

=item set_disk_io_rate

Set disk I/O rate per second.

=item get_disk_io_rate

Get disk I/O rate per second.

=item get_statistic#

Get the statistic # for a statistic name.

=item version

Return the version of this package.

=back

=head1 EXAMPLES

=head1 AUTHOR

Gert-Jan Paulissen, E<lt>gpaulissen@transfer-solutions.comE<gt>.

=head1 BUGS

=head1 SEE ALSO

=head1 COPYRIGHT

All rights reserved by Transfer Solutions b.v.

=cut

#

REM
PROMPT 
PROMPT Creating Package Body pm_cfg
CREATE OR REPLACE PACKAGE BODY pm_cfg IS
-- Local data
c_memory_io_rate_cfg_nr constant pm_config.cfg_nr%type := 1;
c_disk_io_rate_cfg_nr constant pm_config.cfg_nr%type := 2;

v_memory_io_rate number := null;
v_disk_io_rate number := null;

v_last_statistic# v$statname.statistic#%type := null;
v_last_name v$statname.name%type := null;

/*
|| Local procedures
*/

procedure set_cfg_value
( 
	i_db in pm_config.db%type
,	i_cfg_nr in pm_config.cfg_nr%type
,	i_description in pm_config.description%type
,	i_value in pm_config.value%type
)
is
begin
	insert 
	into	pm_config 
	( 
		db
	,	cfg_nr
	,	description
	,	value
	)
	values
	(
		i_db
	,	i_cfg_nr
	,	i_description
	,	i_value
	);
exception
	when	dup_val_on_index
	then
		update	pm_config cfg
		set	cfg.value = i_value
		where	cfg.db = i_db
		and	cfg.cfg_nr = i_cfg_nr;
end	set_cfg_value;

function get_cfg_value
( 
	i_db in pm_config.db%type
,	i_cfg_nr in pm_config.cfg_nr%type
)
return	pm_config.value%type
is
	cursor	c_cfg
	is
		select	cfg.value
		from	pm_config cfg
		where	cfg.db = i_db
		and	cfg.cfg_nr = i_cfg_nr;

	v_value	pm_config.value%type;
begin
	open	c_cfg;
	fetch	c_cfg
	into	v_value;
	if	c_cfg%notfound
	then
		close	c_cfg;
		return	null;
	else
		close	c_cfg;
		return	v_value;
	end if;
exception
	when	others
	then
		return	null;
end	get_cfg_value;

/*
|| Global procedures
*/

-- Set memory I/O rate per second
procedure set_memory_io_rate( i_db in pm_run.db%type, i_value in number )
is
begin
	v_memory_io_rate := null;
	set_cfg_value
	(
		upper(i_db)
	,	c_memory_io_rate_cfg_nr
	,	 'Memory I/O rate per second'
	,	to_char(i_value) 
	);
end	set_memory_io_rate;

-- Get memory I/O rate per second
function get_memory_io_rate( i_db in pm_run.db%type ) return number
is
begin
	if	v_memory_io_rate is null
	then
		v_memory_io_rate := 
			to_number
			( 
				get_cfg_value
				( 
					upper(i_db)
				,	c_memory_io_rate_cfg_nr 
				)
			);
		/* GJP 02-01-2001
		 * Supply a reasonable default.
		 */
		if	v_memory_io_rate is null
		then
			v_memory_io_rate := 500;
		end if;
	end if;
	return	v_memory_io_rate;
exception
	when	others
	then
		return	null;
end	get_memory_io_rate;

-- Set disk I/O rate per second
procedure set_disk_io_rate( i_db in pm_run.db%type, i_value in number )
is
begin
	set_cfg_value
	( 
		upper(i_db)
	,	c_disk_io_rate_cfg_nr
	,	'Disk I/O rate per second'
	,	to_char(i_value) 
	);
end	set_disk_io_rate;

-- Get disk I/O rate per second
function get_disk_io_rate( i_db in pm_run.db%type ) return number
is
begin
	if	v_disk_io_rate is null
	then
		v_disk_io_rate := 
			to_number
			( 
				get_cfg_value
				( 
					upper(i_db)
				,	c_disk_io_rate_cfg_nr 
				)
			);
		/* GJP 02-01-2001
		 * Supply a reasonable default.
		 */
		if	v_disk_io_rate is null
		then
			v_disk_io_rate := 50;
		end if;
	end if;
	return	v_disk_io_rate;
exception
	when	others
	then
		return	null;
end	get_disk_io_rate;

-- Get statistic #
function get_statistic#( i_name in varchar2 ) 
return number
is
	cursor	c_get_statistic#
	is
		select	statistic#
		from	v$statname sta
		where	sta.name = i_name;

	v_value number;
begin
	if	v_last_name = i_name
	then
		null;
	else
		v_last_name := i_name;

		open	c_get_statistic#;
		fetch	c_get_statistic#
		into	v_last_statistic#;

		if	c_get_statistic#%notfound
		then
			v_last_statistic# := null;
			close	c_get_statistic#;
		else
			close	c_get_statistic#;
		end if;
	end if;

	return	v_last_statistic#;
exception
	when	others
	then
		if	c_get_statistic#%isopen
		then
			close	c_get_statistic#;
		end if;
		return	null;
end	get_statistic#;

/* return either the (value of) keyword Name or Revision */
function version 
return varchar2
is
	v_keyword varchar2(100) := NULL;
	v_length integer;
	v_pos integer;
	v_result v_keyword%type := NULL;
begin
	for nr in 1..2
	loop
		if	nr = 1
		then
			v_keyword := '$Name$';
			v_length := 9; /* length with a ':  ' after Name */
		else
			v_keyword := '$Revision$';
			v_length := 13; /* length with a ':  ' after Revision */
		end if;

		v_pos := instr( v_keyword, ':' );
		      /* If the characters following keyword are ':  ' then skip */
		if ( v_pos > 0 and length(v_keyword) > v_length )
		then
			v_result := substr( v_keyword, v_pos + 2, length( v_keyword ) - v_length );
			exit;
		end if;
	end loop;

	return	v_result;
exception
	when	others
	then
		return	NULL;
end	version;

end pm_cfg;
/
